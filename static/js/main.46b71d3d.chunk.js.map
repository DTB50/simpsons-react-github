{"version":3,"sources":["dance.gif","doh.jpg","logo.svg","supportingfns.js","AppHeader.js","quotebox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","fixSpelling","quote","replace","AppHeader","props","react_default","a","createElement","className","topQuote","QuoteBox","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","numberOfQuotes","style","transform","currentCharDirection","src","currentPic","currentQuote","currentChar","styleLeft","console","log","React","Component","App","_this","currentQuotes","errorMessage","fetch","then","res","json","data","setState","character","characterDirection","image","catch","err","getQuote","bind","assertThisInitialized","topQuoteArray","min","max","randomNo","length","Math","ceil","floor","random","_this2","src_AppHeader","doh","alt","onClick","src_quotebox","dance","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.46b71d3d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dance.ca1465b1.gif\";","module.exports = __webpack_public_path__ + \"static/media/doh.9d763e4d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","//Supporting functions\nfunction fixSpelling (quote) {\n  let fixedQuote = quote.replace(\"becuase\", \"because\")\n                                  .replace(\"wierd\", \"weird\")\n                                    .replace(\"gigggling\", \"giggling\")\n                                      .replace(\"sandwhiches\", \"sandwiches\")\n                                        .replace(\"specter\", \"spectre\")\n                                          .replace(\"Edinburg\", \"Edinburgh\")\n                                            .replace(\"stuffs\", \"stuff's\")\n                                              .replace(\"I.. \", \"I... \")\n                                                .replace(\"store bought\", \"store-bought\");\n  return fixedQuote;\n};\n\nexport default fixSpelling;\n","import React from 'react';\n\nconst AppHeader = (props) => {\n    return (\n         <div className=\"App-header\">\n                  <h1>The Simpsons Quote-o-matic</h1>\n                  <p>{props.topQuote}</p>\n                </div>\n    )\n}\n\nexport default AppHeader;","//QUOTE BOX - a stateful component that renders the quote and images according to the App state\n\n//Import all the needed elements\nimport React from 'react';\nimport App from './App.js';\nimport './quotebox.css';\n\n// const QuoteBox = (props) => {\n//Set up Quotebox class as ES6 stateful component\nclass QuoteBox extends React.Component {\n  constructor(props) {\n  super(props);\n  }\n\n  render() {\n\n\n    //Either render the single quote screen, or the quote-off\n    if (this.props.state.numberOfQuotes == 1){\n      //Flip character direction to ensure uniformity\n      let style =  {transform: 'none'};\n      // console.log(this.props.state.currentCharDirection);\n      if (this.props.state.currentCharDirection == \"Right\") {\n        style = {transform: 'scaleX(-1)'};\n      }\n\n\n      return (\n        <section className=\"quoteBox\">\n          <img className='charImage' style={style} src={this.props.state.currentPic}/>\n          <div className='textBox'>\n            <h1 className='charQuote'>{this.props.state.currentQuote}</h1>\n            <p className='charName'>{this.props.state.currentChar}</p>\n          </div>\n        </section>\n      )\n    }\n    else if (this.props.state.numberOfQuotes == 2){\n\n      //Flip character direction to ensure uniformity\n      let styleLeft =  {transform: 'none'};\n      console.log(this.props.state.currentCharDirection);\n      if (this.props.state.currentCharDirection == \"Right\") {\n        styleLeft = {transform: 'scaleX(-1)'};\n      }\n\n\n      return (\n        <section className=\"quoteBox\">\n          <img className='charImage' style={styleLeft} src={this.props.state.currentPic}/>\n          <div className='textBox'>\n            <h1 className='charQuote'>{this.props.state.currentQuote}</h1>\n            <p className='charName'>{this.props.state.currentChar}</p>\n          </div>\n        </section>\n      )\n    }\n  }\n\n}\n\n\n// }\n\n\nexport default QuoteBox;\n","//MAIN APP CLASS - State is held here and fed to child elements (e.g. quotebox)\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport fixSpelling from './supportingfns.js';\n//Remember to import App elements\nimport './App.css';\nimport AppHeader from './AppHeader.js'\nimport QuoteBox from './quotebox.js';\nimport dance from './dance.gif';\nimport doh from './doh.jpg';\n\n//Set up main App class\nclass App extends Component {\n  constructor() {\n  super();\n  //Define state components\n  this.state = {\n    topQuote: null,\n    numberOfQuotes: 1,\n    currentQuotes: null,\n    currentQuote: null,\n    currentChar: null,\n    currentCharDirection: null,\n    currentPic: null,\n    errorMessage: null\n    };\n\n\n  //Make initial API call in constructor (componentWillMount is now deprecated)\n  fetch(`https://thesimpsonsquoteapi.glitch.me/quotes`)\n  .then(res => res.json())\n  .then(data => {\n    console.log(data);\n    this.setState({ currentQuotes: data });\n    this.setState({ currentQuote: fixSpelling(data[0].quote) });\n    this.setState({ currentChar: data[0].character });\n    this.setState({ currentCharDirection: data[0].characterDirection });\n    this.setState({currentPic: data[0].image})\n  })\n  .catch(err => this.setState({ errorMessage: \"D'oh! Something went wrong...\" }));\n      \n  //Bind click handler context\n  this.getQuote = this.getQuote.bind(this);\n  };\n\n\n    componentDidMount() {\n      //Determine top quote\n      const topQuoteArray = [\n        \"That's not the Monsterometer! That's the Quote Exaggerator!\",\n        \"So it's come to this. A Simpsons quote generator.\",\n        \"An Alan Smithee quote generator.\",\n        \"Quote my shorts!\",\n        \"Don't quote a cow, man!\",\n        \"I call it 'Billy and the Quote-o-saurus'.\"\n      ]\n\n      function getRandomInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\n      }\n\n      let randomNo = getRandomInt(0, topQuoteArray.length);\n      console.log(randomNo);\n      this.setState({topQuote:topQuoteArray[randomNo]});\n    }\n\n  //Fetch new API data to update state\n  getQuote() {\n      this.setState({ currentQuotes: null });\n      this.setState({ currentQuote: null });\n      this.setState({ currentChar: null });\n      this.setState({ currentCharDirection: null });\n      this.setState({currentPic: null});\n      this.setState({errorMessage: null});\n      \n    fetch(`https://thesimpsonsquoteapi.glitch.me/quotes`)\n    .then(res => res.json())\n    .then(data => {\n      console.log(data);\n      this.setState({ currentQuotes: data });\n      this.setState({ currentQuote: fixSpelling(data[0].quote) });\n      this.setState({ currentChar: data[0].character });\n      this.setState({ currentCharDirection: data[0].characterDirection });\n      this.setState({currentPic: data[0].image})\n    })\n    .catch(err => this.setState({ errorMessage: \"D'oh! Something went wrong...\" }));\n  }\n\n  //Put it all together\n  render() {\n    \n      if (this.state.errorMessage !== null){\n           return (\n              <div className=\"App\">\n               <AppHeader topQuote={this.state.topQuote}/>\n                <img src={doh} alt=\"Loading failed image\" className=\"loading-image\"/>\n                <p>{this.state.errorMessage}</p>\n                <div className=\"Buttons\">\n                  <button onClick={this.getQuote}>Quote</button>\n                  <button>Quote-off</button>\n                </div>\n              </div>\n            );\n      }\n      else {\n        if (this.state.currentQuote && this.state.currentChar && this.state.currentPic){\n            return (\n              <div className=\"App\">\n                <AppHeader topQuote={this.state.topQuote}/>\n                <QuoteBox state={this.state}/>\n                <div className=\"Buttons\">\n                  <button onClick={this.getQuote}>Quote</button>\n                  <button>Quote-off</button>\n                </div>\n              </div>\n            );\n        } else {\n                return (\n                  <div className=\"App\">\n                    <AppHeader topQuote={this.state.topQuote}/>\n                    <img src={dance} alt=\"Loading as fast as I can...\" className=\"loading-image\"/>\n                    <p>Loading...</p>\n                    <div className=\"Buttons\">\n                      <button onClick={this.getQuote}>Quote</button>\n                      <button>Quote-off</button>\n                    </div>\n                  </div>\n                );\n            }\n    }\n\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}